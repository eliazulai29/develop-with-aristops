# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.202.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
    "internal_ontology.baml": "enum ComponentType {\n  FUNCTION\n  CLASS\n  MODULE\n  FILE\n  API_ENDPOINT\n}\n\nclass CodeComponent {\n  name string\n  type ComponentType\n  sourceFile string\n  description string\n  snippet string\n  complexity \"low\" | \"medium\" | \"high\"\n  dependencies string[] @description(\"Names of other components this component depends on\")\n}\n\nclass Dependency {\n  sourceComponent string @description(\"Name of the source component\")\n  targetComponent string @description(\"Name of the target component\")\n  type string @description(\"Type of dependency: 'calls', 'imports', 'inherits', etc.\")\n  description string\n}\n\nclass CodeAnalysis {\n  components CodeComponent[]?\n  dependencies Dependency[]?\n  overallSummary string? @description(\"High-level summary of the code structure\")\n}\n\n// Main analysis function\nfunction AnalyzeCode(code: string) -> CodeAnalysis {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Analyze the provided code and create a detailed breakdown of its components and dependencies.\n    Focus on identifying functions, classes, and their relationships.\n    \n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} {{ code }}\n  \"#\n}\n\n// Specialized analysis for specific aspects\nfunction AnalyzeComplexity(component: CodeComponent) -> string {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Analyze the complexity of this code component and provide a detailed explanation.\n    Consider factors like cyclomatic complexity, number of dependencies, and code structure.\n\n    {{ ctx.output_format }}\n\n    Component details:\n    {{ _.role(\"user\") }} {{ component }}\n  \"#\n}\n\n// Tests\ntest BasicAnalysis {\n  functions [AnalyzeCode]\n  args {\n    code #\"\nclass UserManager:\n    def __init__(self, db_connection):\n        self.db = db_connection\n        \n    def get_user(self, user_id):\n        return self.db.query(f\"SELECT * FROM users WHERE id = {user_id}\")\n        \n    def create_user(self, name, email):\n        return self.db.execute(\n            \"INSERT INTO users (name, email) VALUES (?, ?)\",\n            [name, email]\n        )\n\ndef initialize_system():\n    db = DatabaseConnection()\n    user_manager = UserManager(db)\n    return user_manager\n\"#\n  }\n}\n\ntest NoDependencies {\n  functions [AnalyzeCode]\n  args {\n    code #\"\n// A simple script with no internal dependencies\nfunction greet(name) {\n  return `Hello, ${name}`;\n}\n\nfunction farewell(name) {\n  return `Goodbye, ${name}`;\n}\n\"#\n  }\n}\n\ntest EmptyInput {\n  functions [AnalyzeCode]\n  args {\n    code \"\"\n  }\n}\n",
}

def get_baml_files():
    return _file_map