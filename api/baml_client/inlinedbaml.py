# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.202.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
    "internal_ontology.baml": "enum ComponentType {\n  FUNCTION\n  CLASS\n  MODULE\n  FILE\n  API_ENDPOINT\n  SERVICE\n  CONFIG\n  TEST\n  MIDDLEWARE\n  UTILS\n}\n\nenum ArchitecturalPattern {\n  MVC\n  MICROSERVICES\n  MONOLITH\n  LAYERED\n  EVENT_DRIVEN\n  REPOSITORY\n  FACTORY\n  SINGLETON\n  OBSERVER\n  UNKNOWN\n}\n\nenum QualityIssue {\n  HIGH_COMPLEXITY\n  SECURITY_VULNERABILITY\n  PERFORMANCE_BOTTLENECK\n  CODE_DUPLICATION\n  POOR_ERROR_HANDLING\n  TIGHT_COUPLING\n  LOW_COHESION\n  MISSING_TESTS\n  HARDCODED_VALUES\n  LONG_PARAMETER_LIST\n}\n\nclass CodeComponent {\n  name string\n  type ComponentType\n  sourceFile string\n  description string\n  snippet string\n  complexity \"low\" | \"medium\" | \"high\"\n  dependencies string[] @description(\"Names of other components this component depends on\")\n  \n  // Enhanced analysis fields\n  purpose string @description(\"What this component is responsible for\")\n  publicInterface string[] @description(\"Public methods/functions exposed\")\n  qualityIssues QualityIssue[] @description(\"Identified code quality issues\")\n  refactoringOpportunities string[] @description(\"Suggested improvements\")\n  testability \"excellent\" | \"good\" | \"poor\" @description(\"How testable this component is\")\n  reusability \"high\" | \"medium\" | \"low\" @description(\"How reusable this component is\")\n}\n\nclass Dependency {\n  sourceComponent string @description(\"Name of the source component\")\n  targetComponent string @description(\"Name of the target component\")\n  type string @description(\"Type of dependency: 'calls', 'imports', 'inherits', etc.\")\n  description string\n  strength \"strong\" | \"medium\" | \"weak\" @description(\"How tightly coupled this dependency is\")\n  direction \"unidirectional\" | \"bidirectional\" @description(\"Direction of the dependency\")\n}\n\nclass ArchitecturalInsight {\n  pattern ArchitecturalPattern @description(\"Detected architectural pattern\")\n  confidence \"high\" | \"medium\" | \"low\" @description(\"Confidence in pattern detection\")\n  description string @description(\"How this pattern is implemented\")\n  adherence \"excellent\" | \"good\" | \"partial\" | \"poor\" @description(\"How well the pattern is followed\")\n  improvements string[] @description(\"Suggestions for better pattern implementation\")\n}\n\nclass SecurityAnalysis {\n  vulnerabilities string[] @description(\"Potential security issues found\")\n  securityPatterns string[] @description(\"Security patterns identified\")\n  recommendations string[] @description(\"Security improvement recommendations\")\n  dataFlowRisks string[] @description(\"Data flow security concerns\")\n}\n\nclass PerformanceInsight {\n  bottlenecks string[] @description(\"Identified performance bottlenecks\")\n  optimizationOpportunities string[] @description(\"Performance optimization suggestions\")\n  scalabilityConcerns string[] @description(\"Scalability issues\")\n  resourceUsage string @description(\"Resource usage patterns\")\n}\n\nclass TestingInsight {\n  testCoverage \"high\" | \"medium\" | \"low\" | \"unknown\" @description(\"Estimated test coverage\")\n  testableComponents string[] @description(\"Well-testable components\")\n  hardToTestComponents string[] @description(\"Components that are hard to test\")\n  testingRecommendations string[] @description(\"Testing improvement suggestions\")\n  missingTestTypes string[] @description(\"Types of tests that appear to be missing\")\n}\n\nclass OperationalInsight {\n  configurationFiles string[] @description(\"Configuration files found\")\n  environmentDependencies string[] @description(\"Environment-specific dependencies\")\n  deploymentConsiderations string[] @description(\"Deployment-related insights\")\n  monitoringOpportunities string[] @description(\"Monitoring and observability suggestions\")\n  maintenanceComplexity \"low\" | \"medium\" | \"high\" @description(\"Maintenance complexity\")\n}\n\nclass CodeAnalysis {\n  components CodeComponent[]?\n  dependencies Dependency[]?\n  overallSummary string? @description(\"High-level summary of the code structure\")\n  \n  // Enhanced analysis sections\n  architecture ArchitecturalInsight? @description(\"Architectural pattern analysis\")\n  security SecurityAnalysis? @description(\"Security analysis\")\n  performance PerformanceInsight? @description(\"Performance analysis\")\n  testing TestingInsight? @description(\"Testing analysis\")\n  operations OperationalInsight? @description(\"Operational considerations\")\n  \n  // Quick insights for external agents\n  keyInsights string[] @description(\"Top 5 most important insights for this codebase\")\n  debuggingTips string[] @description(\"Tips for debugging this codebase\")\n  refactoringPriorities string[] @description(\"Top refactoring priorities\")\n  howToQuestions string[] @description(\"Common 'how to' questions this analysis can answer\")\n  whereToLook string[] @description(\"Where to look for specific functionality\")\n  whyDecisions string[] @description(\"Explanations for architectural decisions\")\n}\n\n// Enhanced main analysis function\nfunction AnalyzeCode(code: string) -> CodeAnalysis {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    You are a senior software architect and code analyst. Perform a comprehensive analysis of the provided codebase.\n\n    Your analysis should include:\n\n    1. **Component Analysis**: Identify all functions, classes, modules, services, configs, tests, middleware, and utilities.\n    2. **Dependency Mapping**: Map all relationships between components, including their strength and direction.\n    3. **Architectural Patterns**: Detect architectural patterns like MVC, microservices, layered architecture, etc.\n    4. **Security Analysis**: Identify potential vulnerabilities, security patterns, and recommendations.\n    5. **Performance Insights**: Spot performance bottlenecks and optimization opportunities.\n    6. **Testing Assessment**: Evaluate test coverage and testability.\n    7. **Operational Considerations**: Analyze configuration, deployment, and maintenance aspects.\n    8. **Quality Issues**: Identify code smells, complexity issues, and refactoring opportunities.\n\n    Focus on providing insights that would help developers answer:\n    - **HOW**: How does this code work? How are components connected?\n    - **WHERE**: Where to find specific functionality? Where are the pain points?\n    - **WHY**: Why were certain architectural decisions made?\n\n    This analysis will be used by:\n    - Developers asking questions about the codebase\n    - External coding agents needing context\n    - Debugging and refactoring tasks\n    - Code reviews and documentation\n\n    Be thorough but practical. Focus on actionable insights.\n\n    {{ ctx.output_format }}\n\n    Code to analyze:\n    {{ _.role(\"user\") }} {{ code }}\n  \"#\n}\n\n// Specialized analysis for specific aspects\nfunction AnalyzeComplexity(component: CodeComponent) -> string {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Analyze the complexity of this code component and provide a detailed explanation.\n    Consider factors like cyclomatic complexity, number of dependencies, and code structure.\n\n    {{ ctx.output_format }}\n\n    Component details:\n    {{ _.role(\"user\") }} {{ component }}\n  \"#\n}\n\n// Tests\ntest BasicAnalysis {\n  functions [AnalyzeCode]\n  args {\n    code #\"\nclass UserManager:\n    def __init__(self, db_connection):\n        self.db = db_connection\n        \n    def get_user(self, user_id):\n        return self.db.query(f\"SELECT * FROM users WHERE id = {user_id}\")\n        \n    def create_user(self, name, email):\n        return self.db.execute(\n            \"INSERT INTO users (name, email) VALUES (?, ?)\",\n            [name, email]\n        )\n\ndef initialize_system():\n    db = DatabaseConnection()\n    user_manager = UserManager(db)\n    return user_manager\n\"#\n  }\n}\n\ntest NoDependencies {\n  functions [AnalyzeCode]\n  args {\n    code #\"\n// A simple script with no internal dependencies\nfunction greet(name) {\n  return `Hello, ${name}`;\n}\n\nfunction farewell(name) {\n  return `Goodbye, ${name}`;\n}\n\"#\n  }\n}\n\ntest EmptyInput {\n  functions [AnalyzeCode]\n  args {\n    code \"\"\n  }\n}\n",
}

def get_baml_files():
    return _file_map