# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (1)
# #########################################################################

class ComponentType(str, Enum):
    FUNCTION = "FUNCTION"
    CLASS = "CLASS"
    MODULE = "MODULE"
    FILE = "FILE"
    API_ENDPOINT = "API_ENDPOINT"

# #########################################################################
# Generated classes (3)
# #########################################################################

class CodeAnalysis(BaseModel):
    components: typing.Optional[typing.List["CodeComponent"]] = None
    dependencies: typing.Optional[typing.List["Dependency"]] = None
    overallSummary: typing.Optional[str] = None

class CodeComponent(BaseModel):
    name: str
    type: ComponentType
    sourceFile: str
    description: str
    snippet: str
    complexity: typing.Union[typing_extensions.Literal['low'], typing_extensions.Literal['medium'], typing_extensions.Literal['high']]
    dependencies: typing.List[str]

class Dependency(BaseModel):
    sourceComponent: str
    targetComponent: str
    type: str
    description: str

# #########################################################################
# Generated type aliases (0)
# #########################################################################
